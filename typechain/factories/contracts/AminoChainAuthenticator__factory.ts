/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AminoChainAuthenticator,
  AminoChainAuthenticatorInterface,
} from "../../contracts/AminoChainAuthenticator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "marketplaceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdcAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8[]",
            name: "A",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "B",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "C",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DPB",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DRB",
            type: "uint8[]",
          },
        ],
        internalType: "struct AminoChainLibrary.BioData",
        name: "bioData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "biobankAddress",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000c4f38038062000c4f8339818101604052810190620000379190620001ba565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663a22cb4658360016040518363ffffffff1660e01b8152600401620000ab92919062000244565b600060405180830381600087803b158015620000c657600080fd5b505af1158015620000db573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000271565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001828262000155565b9050919050565b620001948162000175565b8114620001a057600080fd5b50565b600081519050620001b48162000189565b92915050565b600080600060608486031215620001d657620001d562000150565b5b6000620001e686828701620001a3565b9350506020620001f986828701620001a3565b92505060406200020c86828701620001a3565b9150509250925092565b620002218162000175565b82525050565b60008115159050919050565b6200023e8162000227565b82525050565b60006040820190506200025b600083018562000216565b6200026a602083018462000233565b9392505050565b60805160a05160c05161099d620002b2600039600050506000818161024a01526102bc01526000818160ca0152818161016d015261020d015261099d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a02146100465780632236684414610076578063c9f002ed14610094575b600080fd5b610060600480360381019061005b9190610488565b6100b0565b60405161006d919061054b565b60405180910390f35b61007e6100c5565b60405161008b9190610581565b60405180910390f35b6100ae60048036038101906100a991906105c0565b610169565b005b600063150b7a0260e01b905095945050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632631fc95336040518263ffffffff1660e01b8152600401610121919061062b565b602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610162919061065b565b1415905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166325c4d81933856040518363ffffffff1660e01b81526004016101c69291906108ba565b6020604051808303816000875af11580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610209919061065b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd307f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610288939291906108f9565b600060405180830381600087803b1580156102a257600080fd5b505af11580156102b6573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e2cdc6058233856040518463ffffffff1660e01b815260040161031793929190610930565b600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b505050507f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b933604051610378919061062b565b60405180910390a1505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ba8261038f565b9050919050565b6103ca816103af565b81146103d557600080fd5b50565b6000813590506103e7816103c1565b92915050565b6000819050919050565b610400816103ed565b811461040b57600080fd5b50565b60008135905061041d816103f7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261044857610447610423565b5b8235905067ffffffffffffffff81111561046557610464610428565b5b6020830191508360018202830111156104815761048061042d565b5b9250929050565b6000806000806000608086880312156104a4576104a3610385565b5b60006104b2888289016103d8565b95505060206104c3888289016103d8565b94505060406104d48882890161040e565b935050606086013567ffffffffffffffff8111156104f5576104f461038a565b5b61050188828901610432565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61054581610510565b82525050565b6000602082019050610560600083018461053c565b92915050565b60008115159050919050565b61057b81610566565b82525050565b60006020820190506105966000830184610572565b92915050565b600080fd5b600060a082840312156105b7576105b661059c565b5b81905092915050565b600080604083850312156105d7576105d6610385565b5b600083013567ffffffffffffffff8111156105f5576105f461038a565b5b610601858286016105a1565b9250506020610612858286016103d8565b9150509250929050565b610625816103af565b82525050565b6000602082019050610640600083018461061c565b92915050565b600081519050610655816103f7565b92915050565b60006020828403121561067157610670610385565b5b600061067f84828501610646565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126106b4576106b3610692565b5b83810192508235915060208301925067ffffffffffffffff8211156106dc576106db610688565b5b6020820236038313156106f2576106f161068d565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600060ff82169050919050565b61072b81610715565b82525050565b600061073d8383610722565b60208301905092915050565b61075281610715565b811461075d57600080fd5b50565b60008135905061076f81610749565b92915050565b60006107846020840184610760565b905092915050565b6000602082019050919050565b60006107a583856106fa565b93506107b08261070b565b8060005b858110156107e9576107c68284610775565b6107d08882610731565b97506107db8361078c565b9250506001810190506107b4565b5085925050509392505050565b600060a083016108096000840184610697565b858303600087015261081c838284610799565b9250505061082d6020840184610697565b8583036020870152610840838284610799565b925050506108516040840184610697565b8583036040870152610864838284610799565b925050506108756060840184610697565b8583036060870152610888838284610799565b925050506108996080840184610697565b85830360808701526108ac838284610799565b925050508091505092915050565b60006040820190506108cf600083018561061c565b81810360208301526108e181846107f6565b90509392505050565b6108f3816103ed565b82525050565b600060608201905061090e600083018661061c565b61091b602083018561061c565b61092860408301846108ea565b949350505050565b600060608201905061094560008301866108ea565b610952602083018561061c565b61095f604083018461061c565b94935050505056fea264697066735822122029d4de7d112fb14fb5991e773e0d1efd3778a682c5e06b9876e43873e28e648164736f6c63430008110033";

type AminoChainAuthenticatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AminoChainAuthenticatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AminoChainAuthenticator__factory extends ContractFactory {
  constructor(...args: AminoChainAuthenticatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AminoChainAuthenticator> {
    return super.deploy(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    ) as Promise<AminoChainAuthenticator>;
  }
  override getDeployTransaction(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    );
  }
  override attach(address: string): AminoChainAuthenticator {
    return super.attach(address) as AminoChainAuthenticator;
  }
  override connect(signer: Signer): AminoChainAuthenticator__factory {
    return super.connect(signer) as AminoChainAuthenticator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AminoChainAuthenticatorInterface {
    return new utils.Interface(_abi) as AminoChainAuthenticatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AminoChainAuthenticator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AminoChainAuthenticator;
  }
}
