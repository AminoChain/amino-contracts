/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PhenomCampaignInterface extends ethers.utils.Interface {
  functions: {
    "CAMPAIGN_DURATION()": FunctionFragment;
    "advisorsVestingController()": FunctionFragment;
    "amountPhetaSoldInPublicRound()": FunctionFragment;
    "amountUsdSoldInPublicRound()": FunctionFragment;
    "approveExternalBalance(string)": FunctionFragment;
    "busd()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "communitySaleVestingController()": FunctionFragment;
    "developmentVestingController()": FunctionFragment;
    "fundingTeamVestingController()": FunctionFragment;
    "getAvailableAmount()": FunctionFragment;
    "getAvailableAmountByInvestor(address)": FunctionFragment;
    "getAvailableAmountByPhase(uint8)": FunctionFragment;
    "getAvailableAmountByPhaseAndInvestor(uint8,address)": FunctionFragment;
    "getExternalBalance(string)": FunctionFragment;
    "getInvestedAmount()": FunctionFragment;
    "getInvestedAmountByInvestor(address)": FunctionFragment;
    "getInvestedAmountByPhase(uint8)": FunctionFragment;
    "getInvestedAmountByPhaseAndInvestor(uint8,address)": FunctionFragment;
    "getReleasedAmount()": FunctionFragment;
    "getReleasedAmountByInvestor(address)": FunctionFragment;
    "getReleasedAmountByPhase(uint8)": FunctionFragment;
    "getReleasedAmountByPhaseAndInvestor(uint8,address)": FunctionFragment;
    "getSupplyByPhase(uint8)": FunctionFragment;
    "getWithdrawableAmountByPhase(uint8)": FunctionFragment;
    "hash(string)": FunctionFragment;
    "marketingVestingController()": FunctionFragment;
    "owner()": FunctionFragment;
    "preTgePurchaseTotals(uint8)": FunctionFragment;
    "preTgePurchases(uint256)": FunctionFragment;
    "preTgePurchasesCount()": FunctionFragment;
    "priceByPhase(uint8)": FunctionFragment;
    "privateRoundVestingController()": FunctionFragment;
    "publicRoundActive()": FunctionFragment;
    "publicSaleRegistry(uint256)": FunctionFragment;
    "publicSaleRegistryCount()": FunctionFragment;
    "registerMultiplyPurchases(uint8,address[],uint256[])": FunctionFragment;
    "registerMultiplyUsdPurchases(uint8,address[],uint256[])": FunctionFragment;
    "registerPurchase(uint8,address,uint256)": FunctionFragment;
    "registerUsdPurchase(uint8,address,uint256)": FunctionFragment;
    "releaseAvailable()": FunctionFragment;
    "releaseAvailableByInvestor(address)": FunctionFragment;
    "releaseAvailableByPhaseAndInvestor(uint8,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(uint8,bytes32)": FunctionFragment;
    "seedRoundVestingController()": FunctionFragment;
    "setExternalBalances(uint256[],bytes32[])": FunctionFragment;
    "setVestingStartTime(uint256)": FunctionFragment;
    "startVestingForLast200PreTgePurchases()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrice(uint8,uint256)": FunctionFragment;
    "vestingStartTime()": FunctionFragment;
    "withdraw(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CAMPAIGN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advisorsVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountPhetaSoldInPublicRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountUsdSoldInPublicRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveExternalBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "communitySaleVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingTeamVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmountByInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmountByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmountByPhaseAndInvestor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExternalBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedAmountByInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedAmountByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedAmountByPhaseAndInvestor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasedAmountByInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasedAmountByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasedAmountByPhaseAndInvestor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmountByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hash", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketingVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preTgePurchaseTotals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preTgePurchases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preTgePurchasesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceByPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "privateRoundVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicRoundActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleRegistry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleRegistryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMultiplyPurchases",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMultiplyUsdPurchases",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPurchase",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUsdPurchase",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAvailableByInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAvailableByPhaseAndInvestor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seedRoundVestingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalBalances",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVestingForLast200PreTgePurchases",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CAMPAIGN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advisorsVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountPhetaSoldInPublicRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountUsdSoldInPublicRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveExternalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "communitySaleVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingTeamVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmountByInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmountByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmountByPhaseAndInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExternalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedAmountByInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedAmountByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedAmountByPhaseAndInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedAmountByInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedAmountByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedAmountByPhaseAndInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmountByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preTgePurchaseTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTgePurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTgePurchasesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceByPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateRoundVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicRoundActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleRegistryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMultiplyPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMultiplyUsdPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUsdPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseAvailableByInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseAvailableByPhaseAndInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seedRoundVestingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVestingForLast200PreTgePurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceUpdated(uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceUpdatedEvent = TypedEvent<
  [number, BigNumber, BigNumber] & {
    phase: number;
    oldPrice: BigNumber;
    newPrive: BigNumber;
  }
>;

export class PhenomCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PhenomCampaignInterface;

  functions: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    advisorsVestingController(overrides?: CallOverrides): Promise<[string]>;

    amountPhetaSoldInPublicRound(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    amountUsdSoldInPublicRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveExternalBalance(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _busdAmount: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    communitySaleVestingController(
      overrides?: CallOverrides
    ): Promise<[string]>;

    developmentVestingController(overrides?: CallOverrides): Promise<[string]>;

    fundingTeamVestingController(overrides?: CallOverrides): Promise<[string]>;

    getAvailableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExternalBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvestedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInvestedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvestedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvestedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleasedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReleasedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleasedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleasedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplyByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash(_token: string, overrides?: CallOverrides): Promise<[string]>;

    marketingVestingController(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    preTgePurchaseTotals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preTgePurchases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        phase: number;
        buyer: string;
        phetaAmount: BigNumber;
      }
    >;

    preTgePurchasesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceByPhase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    privateRoundVestingController(overrides?: CallOverrides): Promise<[string]>;

    publicRoundActive(overrides?: CallOverrides): Promise<[boolean]>;

    publicSaleRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        buyer: string;
        busdAmount: BigNumber;
        phetaAmount: BigNumber;
        date: BigNumber;
      }
    >;

    publicSaleRegistryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerMultiplyPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerMultiplyUsdPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _usdAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPurchase(
      _phase: BigNumberish,
      _investor: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUsdPurchase(
      _phase: BigNumberish,
      _investor: string,
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAvailable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAvailableByInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAvailableByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _phase: BigNumberish,
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seedRoundVestingController(overrides?: CallOverrides): Promise<[string]>;

    setExternalBalances(
      _balances: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingStartTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startVestingForLast200PreTgePurchases(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _phase: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _phase: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  advisorsVestingController(overrides?: CallOverrides): Promise<string>;

  amountPhetaSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

  amountUsdSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

  approveExternalBalance(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  busd(overrides?: CallOverrides): Promise<string>;

  buy(
    _busdAmount: BigNumberish,
    _maxPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  communitySaleVestingController(overrides?: CallOverrides): Promise<string>;

  developmentVestingController(overrides?: CallOverrides): Promise<string>;

  fundingTeamVestingController(overrides?: CallOverrides): Promise<string>;

  getAvailableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableAmountByInvestor(
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableAmountByPhase(
    _phase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableAmountByPhaseAndInvestor(
    _phase: BigNumberish,
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExternalBalance(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getInvestedAmountByInvestor(
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvestedAmountByPhase(
    _phase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvestedAmountByPhaseAndInvestor(
    _phase: BigNumberish,
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getReleasedAmountByInvestor(
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleasedAmountByPhase(
    _phase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleasedAmountByPhaseAndInvestor(
    _phase: BigNumberish,
    _investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplyByPhase(
    _phase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawableAmountByPhase(
    _phase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash(_token: string, overrides?: CallOverrides): Promise<string>;

  marketingVestingController(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  preTgePurchaseTotals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  preTgePurchases(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      phase: number;
      buyer: string;
      phetaAmount: BigNumber;
    }
  >;

  preTgePurchasesCount(overrides?: CallOverrides): Promise<BigNumber>;

  priceByPhase(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  privateRoundVestingController(overrides?: CallOverrides): Promise<string>;

  publicRoundActive(overrides?: CallOverrides): Promise<boolean>;

  publicSaleRegistry(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      buyer: string;
      busdAmount: BigNumber;
      phetaAmount: BigNumber;
      date: BigNumber;
    }
  >;

  publicSaleRegistryCount(overrides?: CallOverrides): Promise<BigNumber>;

  registerMultiplyPurchases(
    _phase: BigNumberish,
    _investors: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerMultiplyUsdPurchases(
    _phase: BigNumberish,
    _investors: string[],
    _usdAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPurchase(
    _phase: BigNumberish,
    _investor: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUsdPurchase(
    _phase: BigNumberish,
    _investor: string,
    _usdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAvailable(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAvailableByInvestor(
    _investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAvailableByPhaseAndInvestor(
    _phase: BigNumberish,
    _investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _phase: BigNumberish,
    _vestingScheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seedRoundVestingController(overrides?: CallOverrides): Promise<string>;

  setExternalBalances(
    _balances: BigNumberish[],
    _hashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingStartTime(
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startVestingForLast200PreTgePurchases(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _phase: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _phase: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    advisorsVestingController(overrides?: CallOverrides): Promise<string>;

    amountPhetaSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

    amountUsdSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

    approveExternalBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    busd(overrides?: CallOverrides): Promise<string>;

    buy(
      _busdAmount: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    communitySaleVestingController(overrides?: CallOverrides): Promise<string>;

    developmentVestingController(overrides?: CallOverrides): Promise<string>;

    fundingTeamVestingController(overrides?: CallOverrides): Promise<string>;

    getAvailableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getReleasedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(_token: string, overrides?: CallOverrides): Promise<string>;

    marketingVestingController(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    preTgePurchaseTotals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preTgePurchases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        phase: number;
        buyer: string;
        phetaAmount: BigNumber;
      }
    >;

    preTgePurchasesCount(overrides?: CallOverrides): Promise<BigNumber>;

    priceByPhase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateRoundVestingController(overrides?: CallOverrides): Promise<string>;

    publicRoundActive(overrides?: CallOverrides): Promise<boolean>;

    publicSaleRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        buyer: string;
        busdAmount: BigNumber;
        phetaAmount: BigNumber;
        date: BigNumber;
      }
    >;

    publicSaleRegistryCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerMultiplyPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerMultiplyUsdPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _usdAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerPurchase(
      _phase: BigNumberish,
      _investor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUsdPurchase(
      _phase: BigNumberish,
      _investor: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseAvailable(overrides?: CallOverrides): Promise<void>;

    releaseAvailableByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseAvailableByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      _phase: BigNumberish,
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    seedRoundVestingController(overrides?: CallOverrides): Promise<string>;

    setExternalBalances(
      _balances: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingStartTime(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startVestingForLast200PreTgePurchases(
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _phase: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _phase: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceUpdated(uint8,uint256,uint256)"(
      phase?: BigNumberish | null,
      oldPrice?: BigNumberish | null,
      newPrive?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { phase: number; oldPrice: BigNumber; newPrive: BigNumber }
    >;

    PriceUpdated(
      phase?: BigNumberish | null,
      oldPrice?: BigNumberish | null,
      newPrive?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { phase: number; oldPrice: BigNumber; newPrive: BigNumber }
    >;
  };

  estimateGas: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    advisorsVestingController(overrides?: CallOverrides): Promise<BigNumber>;

    amountPhetaSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

    amountUsdSoldInPublicRound(overrides?: CallOverrides): Promise<BigNumber>;

    approveExternalBalance(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _busdAmount: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    communitySaleVestingController(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    developmentVestingController(overrides?: CallOverrides): Promise<BigNumber>;

    fundingTeamVestingController(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getReleasedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    marketingVestingController(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    preTgePurchaseTotals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preTgePurchases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preTgePurchasesCount(overrides?: CallOverrides): Promise<BigNumber>;

    priceByPhase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateRoundVestingController(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicRoundActive(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSaleRegistryCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerMultiplyPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerMultiplyUsdPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _usdAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPurchase(
      _phase: BigNumberish,
      _investor: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUsdPurchase(
      _phase: BigNumberish,
      _investor: string,
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAvailable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAvailableByInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAvailableByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _phase: BigNumberish,
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seedRoundVestingController(overrides?: CallOverrides): Promise<BigNumber>;

    setExternalBalances(
      _balances: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingStartTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startVestingForLast200PreTgePurchases(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _phase: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _phase: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    advisorsVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountPhetaSoldInPublicRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountUsdSoldInPublicRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveExternalBalance(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _busdAmount: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    communitySaleVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    developmentVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingTeamVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExternalBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvestedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleasedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReleasedAmountByInvestor(
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleasedAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleasedAmountByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableAmountByPhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketingVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preTgePurchaseTotals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preTgePurchases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preTgePurchasesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceByPhase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateRoundVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicRoundActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleRegistryCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMultiplyPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerMultiplyUsdPurchases(
      _phase: BigNumberish,
      _investors: string[],
      _usdAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPurchase(
      _phase: BigNumberish,
      _investor: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUsdPurchase(
      _phase: BigNumberish,
      _investor: string,
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAvailable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAvailableByInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAvailableByPhaseAndInvestor(
      _phase: BigNumberish,
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _phase: BigNumberish,
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seedRoundVestingController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExternalBalances(
      _balances: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingStartTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startVestingForLast200PreTgePurchases(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _phase: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _phase: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
