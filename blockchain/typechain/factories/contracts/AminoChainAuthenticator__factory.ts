/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AminoChainAuthenticator,
  AminoChainAuthenticatorInterface,
} from "../../contracts/AminoChainAuthenticator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "marketplaceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdcAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8[]",
            name: "A",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "B",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "C",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DPB",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DRB",
            type: "uint8[]",
          },
        ],
        internalType: "struct AminoChainLibrary.BioData",
        name: "bioData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "biobankAddress",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040526954b40b1f852bda00000060005534801561001e57600080fd5b50604051610a6f380380610a6f83398181016040528101906100409190610147565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505061019a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610114826100e9565b9050919050565b61012481610109565b811461012f57600080fd5b50565b6000815190506101418161011b565b92915050565b6000806000606084860312156101605761015f6100e4565b5b600061016e86828701610132565b935050602061017f86828701610132565b925050604061019086828701610132565b9150509250925092565b60805160a05160c05161089c6101d3600039600050506000818161017b01526101ed01526000818160a0015261013e015261089c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063150b7a021461003b578063c9f002ed1461006b575b600080fd5b610055600480360381019061005091906103bd565b610087565b6040516100629190610480565b60405180910390f35b610085600480360381019061008091906104bf565b61009c565b005b600063150b7a0260e01b905095945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630b8e8aa8846040518263ffffffff1660e01b81526004016100f7919061074d565b6020604051808303816000875af1158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a9190610784565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd307f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b81526004016101b9939291906107cf565b600060405180830381600087803b1580156101d357600080fd5b505af11580156101e7573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663eef06bbd8260005433866040518563ffffffff1660e01b815260040161024c9493929190610806565b600060405180830381600087803b15801561026657600080fd5b505af115801561027a573d6000803e3d6000fd5b505050507f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9336040516102ad919061084b565b60405180910390a1505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ef826102c4565b9050919050565b6102ff816102e4565b811461030a57600080fd5b50565b60008135905061031c816102f6565b92915050565b6000819050919050565b61033581610322565b811461034057600080fd5b50565b6000813590506103528161032c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261037d5761037c610358565b5b8235905067ffffffffffffffff81111561039a5761039961035d565b5b6020830191508360018202830111156103b6576103b5610362565b5b9250929050565b6000806000806000608086880312156103d9576103d86102ba565b5b60006103e78882890161030d565b95505060206103f88882890161030d565b945050604061040988828901610343565b935050606086013567ffffffffffffffff81111561042a576104296102bf565b5b61043688828901610367565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61047a81610445565b82525050565b60006020820190506104956000830184610471565b92915050565b600080fd5b600060a082840312156104b6576104b561049b565b5b81905092915050565b600080604083850312156104d6576104d56102ba565b5b600083013567ffffffffffffffff8111156104f4576104f36102bf565b5b610500858286016104a0565b92505060206105118582860161030d565b9150509250929050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261054757610546610525565b5b83810192508235915060208301925067ffffffffffffffff82111561056f5761056e61051b565b5b60208202360383131561058557610584610520565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600060ff82169050919050565b6105be816105a8565b82525050565b60006105d083836105b5565b60208301905092915050565b6105e5816105a8565b81146105f057600080fd5b50565b600081359050610602816105dc565b92915050565b600061061760208401846105f3565b905092915050565b6000602082019050919050565b6000610638838561058d565b93506106438261059e565b8060005b8581101561067c576106598284610608565b61066388826105c4565b975061066e8361061f565b925050600181019050610647565b5085925050509392505050565b600060a0830161069c600084018461052a565b85830360008701526106af83828461062c565b925050506106c0602084018461052a565b85830360208701526106d383828461062c565b925050506106e4604084018461052a565b85830360408701526106f783828461062c565b92505050610708606084018461052a565b858303606087015261071b83828461062c565b9250505061072c608084018461052a565b858303608087015261073f83828461062c565b925050508091505092915050565b600060208201905081810360008301526107678184610689565b905092915050565b60008151905061077e8161032c565b92915050565b60006020828403121561079a576107996102ba565b5b60006107a88482850161076f565b91505092915050565b6107ba816102e4565b82525050565b6107c981610322565b82525050565b60006060820190506107e460008301866107b1565b6107f160208301856107b1565b6107fe60408301846107c0565b949350505050565b600060808201905061081b60008301876107c0565b61082860208301866107c0565b61083560408301856107b1565b61084260608301846107b1565b95945050505050565b600060208201905061086060008301846107b1565b9291505056fea2646970667358221220d1d95b542e1d48b8f6f6799c17c2eaf6ac02d857781d285602222bf34b37225c64736f6c63430008110033";

type AminoChainAuthenticatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AminoChainAuthenticatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AminoChainAuthenticator__factory extends ContractFactory {
  constructor(...args: AminoChainAuthenticatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AminoChainAuthenticator> {
    return super.deploy(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    ) as Promise<AminoChainAuthenticator>;
  }
  override getDeployTransaction(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    );
  }
  override attach(address: string): AminoChainAuthenticator {
    return super.attach(address) as AminoChainAuthenticator;
  }
  override connect(signer: Signer): AminoChainAuthenticator__factory {
    return super.connect(signer) as AminoChainAuthenticator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AminoChainAuthenticatorInterface {
    return new utils.Interface(_abi) as AminoChainAuthenticatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AminoChainAuthenticator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AminoChainAuthenticator;
  }
}
