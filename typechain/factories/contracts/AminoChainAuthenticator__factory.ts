/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AminoChainAuthenticator,
  AminoChainAuthenticatorInterface,
} from "../../contracts/AminoChainAuthenticator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "marketplaceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdcAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8[]",
            name: "A",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "B",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "C",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DPB",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DRB",
            type: "uint8[]",
          },
        ],
        internalType: "struct AminoChainLibrary.BioData",
        name: "bioData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "biobankAddress",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000fce38038062000fce8339818101604052810190620000379190620001ba565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663a22cb4658360016040518363ffffffff1660e01b8152600401620000ab92919062000244565b600060405180830381600087803b158015620000c657600080fd5b505af1158015620000db573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000271565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001828262000155565b9050919050565b620001948162000175565b8114620001a057600080fd5b50565b600081519050620001b48162000189565b92915050565b600080600060608486031215620001d657620001d562000150565b5b6000620001e686828701620001a3565b9350506020620001f986828701620001a3565b92505060406200020c86828701620001a3565b9150509250925092565b620002218162000175565b82525050565b60008115159050919050565b6200023e8162000227565b82525050565b60006040820190506200025b600083018562000216565b6200026a602083018462000233565b9392505050565b60805160a05160c051610d2a620002a460003960005050600061022801526000818160ca01526101730152610d2a6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a021461004657806322366844146100765780634cb9fe5814610094575b600080fd5b610060600480360381019061005b9190610450565b6100b0565b60405161006d9190610513565b60405180910390f35b61007e6100c5565b60405161008b9190610549565b60405180910390f35b6100ae60048036038101906100a991906105de565b61016f565b005b600063150b7a0260e01b905095945050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631881eeb4336040518263ffffffff1660e01b8152600401610121919061067d565b600060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061016791906107fc565b511415905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166360f22dc8338786866040518563ffffffff1660e01b81526004016101d09493929190610af2565b6000604051808303816000875af11580156101ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061021891906107fc565b905060005b81518110156102e2577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e2cdc60583838151811061027557610274610b39565b5b602002602001015133886040518463ffffffff1660e01b815260040161029d93929190610b77565b600060405180830381600087803b1580156102b757600080fd5b505af11580156102cb573d6000803e3d6000fd5b5050505080806102da90610bdd565b91505061021d565b50806040516102f19190610cdd565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f7d4cdd7c46b6e3c6b78909afb3ce556b6faa88f43754ec9358b9b3c76b58f73160405160405180910390a35050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061038282610357565b9050919050565b61039281610377565b811461039d57600080fd5b50565b6000813590506103af81610389565b92915050565b6000819050919050565b6103c8816103b5565b81146103d357600080fd5b50565b6000813590506103e5816103bf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104105761040f6103eb565b5b8235905067ffffffffffffffff81111561042d5761042c6103f0565b5b602083019150836001820283011115610449576104486103f5565b5b9250929050565b60008060008060006080868803121561046c5761046b61034d565b5b600061047a888289016103a0565b955050602061048b888289016103a0565b945050604061049c888289016103d6565b935050606086013567ffffffffffffffff8111156104bd576104bc610352565b5b6104c9888289016103fa565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61050d816104d8565b82525050565b60006020820190506105286000830184610504565b92915050565b60008115159050919050565b6105438161052e565b82525050565b600060208201905061055e600083018461053a565b92915050565b600080fd5b600060a0828403121561057f5761057e610564565b5b81905092915050565b60008083601f84011261059e5761059d6103eb565b5b8235905067ffffffffffffffff8111156105bb576105ba6103f0565b5b6020830191508360208202830111156105d7576105d66103f5565b5b9250929050565b600080600080606085870312156105f8576105f761034d565b5b600085013567ffffffffffffffff81111561061657610615610352565b5b61062287828801610569565b9450506020610633878288016103a0565b935050604085013567ffffffffffffffff81111561065457610653610352565b5b61066087828801610588565b925092505092959194509250565b61067781610377565b82525050565b6000602082019050610692600083018461066e565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106e182610698565b810181811067ffffffffffffffff82111715610700576106ff6106a9565b5b80604052505050565b6000610713610343565b905061071f82826106d8565b919050565b600067ffffffffffffffff82111561073f5761073e6106a9565b5b602082029050602081019050919050565b60008151905061075f816103bf565b92915050565b600061077861077384610724565b610709565b9050808382526020820190506020840283018581111561079b5761079a6103f5565b5b835b818110156107c457806107b08882610750565b84526020840193505060208101905061079d565b5050509392505050565b600082601f8301126107e3576107e26103eb565b5b81516107f3848260208601610765565b91505092915050565b6000602082840312156108125761081161034d565b5b600082015167ffffffffffffffff8111156108305761082f610352565b5b61083c848285016107ce565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126108715761087061084f565b5b83810192508235915060208301925067ffffffffffffffff82111561089957610898610845565b5b6020820236038313156108af576108ae61084a565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600060ff82169050919050565b6108e8816108d2565b82525050565b60006108fa83836108df565b60208301905092915050565b61090f816108d2565b811461091a57600080fd5b50565b60008135905061092c81610906565b92915050565b6000610941602084018461091d565b905092915050565b6000602082019050919050565b600061096283856108b7565b935061096d826108c8565b8060005b858110156109a6576109838284610932565b61098d88826108ee565b975061099883610949565b925050600181019050610971565b5085925050509392505050565b600060a083016109c66000840184610854565b85830360008701526109d9838284610956565b925050506109ea6020840184610854565b85830360208701526109fd838284610956565b92505050610a0e6040840184610854565b8583036040870152610a21838284610956565b92505050610a326060840184610854565b8583036060870152610a45838284610956565b92505050610a566080840184610854565b8583036080870152610a69838284610956565b925050508091505092915050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000610aa28385610a77565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610ad557610ad4610a88565b5b602083029250610ae6838584610a8d565b82840190509392505050565b6000606082019050610b07600083018761066e565b8181036020830152610b1981866109b3565b90508181036040830152610b2e818486610a96565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610b71816103b5565b82525050565b6000606082019050610b8c6000830186610b68565b610b99602083018561066e565b610ba6604083018461066e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610be8826103b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c1a57610c19610bae565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b610c54816103b5565b82525050565b6000610c668383610c4b565b60208301905092915050565b6000602082019050919050565b6000610c8a82610c25565b610c948185610c30565b9350610c9f83610c3b565b8060005b83811015610cd0578151610cb78882610c5a565b9750610cc283610c72565b925050600181019050610ca3565b5085935050505092915050565b6000610ce98284610c7f565b91508190509291505056fea2646970667358221220816768989a5c74915332f22213408497867ff20bde8e37019bbea5749d31271764736f6c63430008110033";

type AminoChainAuthenticatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AminoChainAuthenticatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AminoChainAuthenticator__factory extends ContractFactory {
  constructor(...args: AminoChainAuthenticatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AminoChainAuthenticator> {
    return super.deploy(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    ) as Promise<AminoChainAuthenticator>;
  }
  override getDeployTransaction(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    );
  }
  override attach(address: string): AminoChainAuthenticator {
    return super.attach(address) as AminoChainAuthenticator;
  }
  override connect(signer: Signer): AminoChainAuthenticator__factory {
    return super.connect(signer) as AminoChainAuthenticator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AminoChainAuthenticatorInterface {
    return new utils.Interface(_abi) as AminoChainAuthenticatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AminoChainAuthenticator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AminoChainAuthenticator;
  }
}
