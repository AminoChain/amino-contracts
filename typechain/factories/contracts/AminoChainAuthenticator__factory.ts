/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AminoChainAuthenticator,
  AminoChainAuthenticatorInterface,
} from "../../contracts/AminoChainAuthenticator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "marketplaceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdcAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8[]",
            name: "A",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "B",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "C",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DPB",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "DRB",
            type: "uint8[]",
          },
        ],
        internalType: "struct AminoChainLibrary.BioData",
        name: "bioData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "biobankAddress",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000b6838038062000b688339818101604052810190620000379190620001ba565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663a22cb4658360016040518363ffffffff1660e01b8152600401620000ab92919062000244565b600060405180830381600087803b158015620000c657600080fd5b505af1158015620000db573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000271565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001828262000155565b9050919050565b620001948162000175565b8114620001a057600080fd5b50565b600081519050620001b48162000189565b92915050565b600080600060608486031215620001d657620001d562000150565b5b6000620001e686828701620001a3565b9350506020620001f986828701620001a3565b92505060406200020c86828701620001a3565b9150509250925092565b620002218162000175565b82525050565b60008115159050919050565b6200023e8162000227565b82525050565b60006040820190506200025b600083018562000216565b6200026a602083018462000233565b9392505050565b60805160a05160c0516108c4620002a460003960005050600061020d01526000818160ca015261016d01526108c46000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a02146100465780632236684414610076578063c9f002ed14610094575b600080fd5b610060600480360381019061005b91906103e6565b6100b0565b60405161006d91906104a9565b60405180910390f35b61007e6100c5565b60405161008b91906104df565b60405180910390f35b6100ae60048036038101906100a9919061051e565b610169565b005b600063150b7a0260e01b905095945050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632631fc95336040518263ffffffff1660e01b81526004016101219190610589565b602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016291906105b9565b1415905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166325c4d81933856040518363ffffffff1660e01b81526004016101c6929190610818565b6020604051808303816000875af11580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020991906105b9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e2cdc6058233856040518463ffffffff1660e01b815260040161026893929190610857565b600060405180830381600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b50505050803373ffffffffffffffffffffffffffffffffffffffff167fe29d35093005f4d575e1003753426b57a7f64378ba73332eef9c6ccc2b8decd660405160405180910390a3505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610318826102ed565b9050919050565b6103288161030d565b811461033357600080fd5b50565b6000813590506103458161031f565b92915050565b6000819050919050565b61035e8161034b565b811461036957600080fd5b50565b60008135905061037b81610355565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103a6576103a5610381565b5b8235905067ffffffffffffffff8111156103c3576103c2610386565b5b6020830191508360018202830111156103df576103de61038b565b5b9250929050565b600080600080600060808688031215610402576104016102e3565b5b600061041088828901610336565b955050602061042188828901610336565b94505060406104328882890161036c565b935050606086013567ffffffffffffffff811115610453576104526102e8565b5b61045f88828901610390565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104a38161046e565b82525050565b60006020820190506104be600083018461049a565b92915050565b60008115159050919050565b6104d9816104c4565b82525050565b60006020820190506104f460008301846104d0565b92915050565b600080fd5b600060a08284031215610515576105146104fa565b5b81905092915050565b60008060408385031215610535576105346102e3565b5b600083013567ffffffffffffffff811115610553576105526102e8565b5b61055f858286016104ff565b925050602061057085828601610336565b9150509250929050565b6105838161030d565b82525050565b600060208201905061059e600083018461057a565b92915050565b6000815190506105b381610355565b92915050565b6000602082840312156105cf576105ce6102e3565b5b60006105dd848285016105a4565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610612576106116105f0565b5b83810192508235915060208301925067ffffffffffffffff82111561063a576106396105e6565b5b6020820236038313156106505761064f6105eb565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600060ff82169050919050565b61068981610673565b82525050565b600061069b8383610680565b60208301905092915050565b6106b081610673565b81146106bb57600080fd5b50565b6000813590506106cd816106a7565b92915050565b60006106e260208401846106be565b905092915050565b6000602082019050919050565b60006107038385610658565b935061070e82610669565b8060005b858110156107475761072482846106d3565b61072e888261068f565b9750610739836106ea565b925050600181019050610712565b5085925050509392505050565b600060a0830161076760008401846105f5565b858303600087015261077a8382846106f7565b9250505061078b60208401846105f5565b858303602087015261079e8382846106f7565b925050506107af60408401846105f5565b85830360408701526107c28382846106f7565b925050506107d360608401846105f5565b85830360608701526107e68382846106f7565b925050506107f760808401846105f5565b858303608087015261080a8382846106f7565b925050508091505092915050565b600060408201905061082d600083018561057a565b818103602083015261083f8184610754565b90509392505050565b6108518161034b565b82525050565b600060608201905061086c6000830186610848565b610879602083018561057a565b610886604083018461057a565b94935050505056fea2646970667358221220f468d12f587b5e4d5fe6657451be90cbb25d1402b95c7d89bd58772680f481c164736f6c63430008110033";

type AminoChainAuthenticatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AminoChainAuthenticatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AminoChainAuthenticator__factory extends ContractFactory {
  constructor(...args: AminoChainAuthenticatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AminoChainAuthenticator> {
    return super.deploy(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    ) as Promise<AminoChainAuthenticator>;
  }
  override getDeployTransaction(
    nftAddress: PromiseOrValue<string>,
    marketplaceAddress: PromiseOrValue<string>,
    usdcAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      nftAddress,
      marketplaceAddress,
      usdcAddress,
      overrides || {}
    );
  }
  override attach(address: string): AminoChainAuthenticator {
    return super.attach(address) as AminoChainAuthenticator;
  }
  override connect(signer: Signer): AminoChainAuthenticator__factory {
    return super.connect(signer) as AminoChainAuthenticator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AminoChainAuthenticatorInterface {
    return new utils.Interface(_abi) as AminoChainAuthenticatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AminoChainAuthenticator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AminoChainAuthenticator;
  }
}
