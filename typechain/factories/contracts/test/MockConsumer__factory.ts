/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockConsumer,
  MockConsumerInterface,
} from "../../../contracts/test/MockConsumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bonusToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bonusToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "marketing",
        type: "uint256",
      },
    ],
    name: "buyOutside",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516105cf3803806105cf833981810160405281019061003291906100c4565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013f565b6000815190506100be81610128565b92915050565b6000602082840312156100da576100d9610123565b5b60006100e8848285016100af565b91505092915050565b60006100fc82610103565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610131816100f1565b811461013c57600080fd5b50565b60805160601c61047261015d60003960006101ec01526104726000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063215809511461003b57806341d4a1ab14610057575b600080fd5b61005560048036038101906100509190610264565b610075565b005b61005f6101e8565b60405161006c919061032f565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306040518363ffffffff1660e01b81526004016100d392919061034a565b60206040518083038186803b1580156100eb57600080fd5b505afa1580156100ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012391906102e4565b90508281101561013257600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b815260040161018f93929190610373565b602060405180830381600087803b1580156101a957600080fd5b505af11580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e191906102b7565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008135905061021f816103f7565b92915050565b6000815190506102348161040e565b92915050565b60008135905061024981610425565b92915050565b60008151905061025e81610425565b92915050565b60008060006060848603121561027d5761027c6103f2565b5b600061028b86828701610210565b935050602061029c8682870161023a565b92505060406102ad8682870161023a565b9150509250925092565b6000602082840312156102cd576102cc6103f2565b5b60006102db84828501610225565b91505092915050565b6000602082840312156102fa576102f96103f2565b5b60006103088482850161024f565b91505092915050565b61031a816103aa565b82525050565b610329816103e8565b82525050565b60006020820190506103446000830184610311565b92915050565b600060408201905061035f6000830185610311565b61036c6020830184610311565b9392505050565b60006060820190506103886000830186610311565b6103956020830185610311565b6103a26040830184610320565b949350505050565b60006103b5826103c8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b610400816103aa565b811461040b57600080fd5b50565b610417816103bc565b811461042257600080fd5b50565b61042e816103e8565b811461043957600080fd5b5056fea2646970667358221220abd2d02a7b06ad0a84766ca99ca5a39c471ad447e84e5d36d7c97c9e97c83dc164736f6c63430008070033";

type MockConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockConsumer__factory extends ContractFactory {
  constructor(...args: MockConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    bonusToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockConsumer> {
    return super.deploy(bonusToken_, overrides || {}) as Promise<MockConsumer>;
  }
  override getDeployTransaction(
    bonusToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(bonusToken_, overrides || {});
  }
  override attach(address: string): MockConsumer {
    return super.attach(address) as MockConsumer;
  }
  override connect(signer: Signer): MockConsumer__factory {
    return super.connect(signer) as MockConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockConsumerInterface {
    return new utils.Interface(_abi) as MockConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockConsumer {
    return new Contract(address, _abi, signerOrProvider) as MockConsumer;
  }
}
